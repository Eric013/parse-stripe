0 info it worked if it ends with ok
1 verbose cli [ 'node', '/usr/local/bin/npm', 'publish' ]
2 info using npm@1.4.16
3 info using node@v0.10.28
4 verbose node symlink /usr/bin/node
5 verbose publish [ '.' ]
6 verbose cache add [ '.', null ]
7 verbose cache add name=undefined spec="." args=[".",null]
8 verbose parsed url { protocol: null,
8 verbose parsed url   slashes: null,
8 verbose parsed url   auth: null,
8 verbose parsed url   host: null,
8 verbose parsed url   port: null,
8 verbose parsed url   hostname: null,
8 verbose parsed url   hash: null,
8 verbose parsed url   search: null,
8 verbose parsed url   query: null,
8 verbose parsed url   pathname: '.',
8 verbose parsed url   path: '.',
8 verbose parsed url   href: '.' }
9 silly lockFile 3a52ce78- .
10 verbose lock . /Users/florent/.npm/3a52ce78-.lock
11 verbose tar pack [ '/Users/florent/.npm/stripe/2.5.0/package.tgz', '.' ]
12 verbose tarball /Users/florent/.npm/stripe/2.5.0/package.tgz
13 verbose folder .
14 info prepublish stripe@2.5.0
15 silly lockFile 1f1177db-tar tar://.
16 verbose lock tar://. /Users/florent/.npm/1f1177db-tar.lock
17 silly lockFile be692ee5-ent-npm-stripe-2-5-0-package-tgz tar:///Users/florent/.npm/stripe/2.5.0/package.tgz
18 verbose lock tar:///Users/florent/.npm/stripe/2.5.0/package.tgz /Users/florent/.npm/be692ee5-ent-npm-stripe-2-5-0-package-tgz.lock
19 silly lockFile 1f1177db-tar tar://.
20 silly lockFile 1f1177db-tar tar://.
21 silly lockFile be692ee5-ent-npm-stripe-2-5-0-package-tgz tar:///Users/florent/.npm/stripe/2.5.0/package.tgz
22 silly lockFile be692ee5-ent-npm-stripe-2-5-0-package-tgz tar:///Users/florent/.npm/stripe/2.5.0/package.tgz
23 silly lockFile 51b9b284-florent-npm-stripe-2-5-0-package /Users/florent/.npm/stripe/2.5.0/package
24 verbose lock /Users/florent/.npm/stripe/2.5.0/package /Users/florent/.npm/51b9b284-florent-npm-stripe-2-5-0-package.lock
25 silly lockFile 51b9b284-florent-npm-stripe-2-5-0-package /Users/florent/.npm/stripe/2.5.0/package
26 silly lockFile 51b9b284-florent-npm-stripe-2-5-0-package /Users/florent/.npm/stripe/2.5.0/package
27 silly lockFile 3a52ce78- .
28 silly lockFile 3a52ce78- .
29 silly publish { name: 'stripe',
29 silly publish   version: '2.5.0',
29 silly publish   description: 'Stripe API wrapper',
29 silly publish   homepage: 'https://github.com/flovilmart/parse-stripe',
29 silly publish   author:
29 silly publish    { name: 'Florent Vilmart',
29 silly publish      email: 'flovilmart@icloud.com',
29 silly publish      url: 'https://stripe.com/' },
29 silly publish   contributors:
29 silly publish    [ { name: 'Ask BjÃ¸rn Hansen',
29 silly publish        email: 'ask@develooper.com',
29 silly publish        url: 'http://www.askask.com/' },
29 silly publish      { name: 'Michelle Bu', email: 'michelle@stripe.com' },
29 silly publish      { name: 'Alex Sexton', email: 'alex@stripe.com' },
29 silly publish      { name: 'James Padolsey', email: 'james@stripe.com' } ],
29 silly publish   repository:
29 silly publish    { type: 'git',
29 silly publish      url: 'git://github.com/flovilmart/parse-stripe.git' },
29 silly publish   'bugs:': 'https://github.com/flovilmart/parse-stripe/issues',
29 silly publish   engines: { node: '>= v0.8.0' },
29 silly publish   main: 'lib/stripe.js',
29 silly publish   devDependencies:
29 silly publish    { mocha: '~1.13.0',
29 silly publish      chai: '~1.8.0',
29 silly publish      'chai-as-promised': '~4.0.0',
29 silly publish      'mocha-as-promised': '~1.4.0' },
29 silly publish   dependencies: { when: '~2.4.0' },
29 silly publish   scripts: { test: 'mocha' },
29 silly publish   readme: '# Stripe node.js bindings [![Build Status](https://travis-ci.org/stripe/stripe-node.png?branch=master)](https://travis-ci.org/stripe/stripe-node)\n\n## Version 2 Update Notice\n\n**[Read about Version 2 here](https://github.com/stripe/stripe-node/wiki/Version-2)** (Released October 18th, 2013)\n\n## Installation\n\n`npm install stripe`\n\n## Documentation\n\nDocumentation is available at https://stripe.com/docs/api/node.\n\n## API Overview\n\nEvery resource is accessed via your `stripe` instance:\n\n```js\nvar stripe = require(\'stripe\')(\' your stripe API key \');\n// stripe.{ RESOURCE_NAME }.{ METHOD_NAME }\n```\n\nEvery resource method accepts an optional callback as the last argument:\n\n```js\nstripe.customers.create(\n  { email: \'customer@example.com\' },\n  function(err, customer) {\n    err; // null if no error occurred\n    customer; // the created customer object\n  }\n);\n```\n\nAdditionally, every resource method returns a promise, so you don\'t have to use the regular callback. E.g.\n\n```js\n// Create a new customer and then a new charge for that customer:\nstripe.customers.create({\n  email: \'foo-customer@example.com\'\n}).then(function(customer) {\n  return stripe.charges.create({\n    amount: 1600,\n    currency: \'usd\',\n    customer: customer.id\n  });\n}).then(function(charge) {\n  // New charge created on a new customer\n}, function(err) {\n  // Deal with an error\n});\n```\n\n### Available resources & methods\n\n*Where you see `params` it is a plain JavaScript object, e.g. `{ email: \'foo@example.com\' }`*\n\n * account\n  * [`retrieve()`](https://stripe.com/docs/api/node#retrieve_account)\n * balance\n  * [`retrieve()`](https://stripe.com/docs/api/node#retrieve_balance)\n  * [`listTransactions([params])`](https://stripe.com/docs/api/node#balance_history)\n  * [`retrieveTransaction(transactionId)`](https://stripe.com/docs/api/node#retrieve_balance_transaction)\n * charges\n  * [`create(params)`](https://stripe.com/docs/api/node#create_charge)\n  * [`list([params])`](https://stripe.com/docs/api/node#list_charges)\n  * [`retrieve(chargeId)`](https://stripe.com/docs/api/node#retrieve_charge)\n  * [`capture(chargeId[, params])`](https://stripe.com/docs/api/node#charge_capture)\n  * [`refund(chargeId[, params])`](https://stripe.com/docs/api/node#refund_charge)\n  * [`update(chargeId[, params])`](https://stripe.com/docs/api/node#update_charge)\n  * [`updateDispute(chargeId[, params])`](https://stripe.com/docs/api/node#update_dispute)\n  * [`closeDispute(chargeId[, params])`](https://stripe.com/docs/api/node#close_dispute)\n  * `setMetadata(chargeId, metadataObject)` ([metadata info](https://stripe.com/docs/api/node#metadata))\n  * `setMetadata(chargeId, key, value)`\n  * `getMetadata(chargeId)`\n * coupons\n  * [`create(params)`](https://stripe.com/docs/api/node#create_coupon)\n  * [`list([params])`](https://stripe.com/docs/api/node#list_coupons)\n  * [`retrieve(chargeId)`](https://stripe.com/docs/api/node#retrieve_coupon)\n  * [`del(chargeId)`](https://stripe.com/docs/api/node#delete_coupon)\n * customers\n  * [`create(params)`](https://stripe.com/docs/api/node#create_customer)\n  * [`list([params])`](https://stripe.com/docs/api/node#list_customers)\n  * [`update(customerId[, params])`](https://stripe.com/docs/api/node#update_customer)\n  * [`retrieve(customerId)`](https://stripe.com/docs/api/node#retrieve_customer)\n  * [`del(customerId)`](https://stripe.com/docs/api/node#delete_customer)\n  * `setMetadata(customerId, metadataObject)` ([metadata info](https://stripe.com/docs/api/node#metadata))\n  * `setMetadata(customerId, key, value)`\n  * `getMetadata(customerId)`\n  * [`updateSubscription(customerId, subscriptionId, [, params])`](https://stripe.com/docs/api/node#update_subscription)\n  * [`cancelSubscription(customerId, subscriptionId, [, params])`](https://stripe.com/docs/api/node#cancel_subscription)\n  * [`createCard(customerId[, params])`](https://stripe.com/docs/api/node#create_card)\n  * [`listCards(customerId)`](https://stripe.com/docs/api/node#list_cards)\n  * [`retrieveCard(customerId, cardId)`](https://stripe.com/docs/api/node#retrieve_card)\n  * [`updateCard(customerId, cardId[, params])`](https://stripe.com/docs/api/node#update_card)\n  * [`deleteCard(customerId, cardId)`](https://stripe.com/docs/api/node#delete_card)\n  * [`deleteDiscount(customerId)`](https://stripe.com/docs/api/node#delete_discount)\n * events (*[types of events](https://stripe.com/docs/api/node#event_types)*)\n  * [`list([params])`](https://stripe.com/docs/api/node#list_events)\n  * [`retrieve(eventId)`](https://stripe.com/docs/api/node#retrieve_event)\n * invoiceItems\n  * [`create(params)`](https://stripe.com/docs/api/node#create_invoiceitem)\n  * [`list([params])`](https://stripe.com/docs/api/node#list_invoiceitems)\n  * [`update(invoiceItemId[, params])`](https://stripe.com/docs/api/node#update_invoiceitem)\n  * [`retrieve(invoiceItemId)`](https://stripe.com/docs/api/node#retrieve_invoiceitem)\n  * [`del(invoiceItemId)`](https://stripe.com/docs/api/node#delete_invoiceitem)\n * invoices\n  * [`create(params)`](https://stripe.com/docs/api/node#create_invoice)\n  * [`list([params])`](https://stripe.com/docs/api/node#list_customer_invoices)\n  * [`update(invoiceId[, params])`](https://stripe.com/docs/api/node#update_invoice)\n  * [`retrieve(invoiceId)`](https://stripe.com/docs/api/node#retrieve_invoice)\n  * [`retrieveLines(invoiceId)`](https://stripe.com/docs/api/node#invoice_lines)\n  * [`retrieveUpcoming(customerId)`](https://stripe.com/docs/api/node#retrieve_customer_invoice)\n  * [`pay(invoiceId)`](https://stripe.com/docs/api/node#pay_invoice)\n * plans\n  * [`create(params)`](https://stripe.com/docs/api/node#create_plan)\n  * [`list([params])`](https://stripe.com/docs/api/node#list_plans)\n  * [`update(planId[, params])`](https://stripe.com/docs/api/node#update_plan)\n  * [`retrieve(planId)`](https://stripe.com/docs/api/node#retrieve_plan)\n  * [`del(planId)`](https://stripe.com/docs/api/node#delete_plan)\n * recipient\n  * [`create(params)`](https://stripe.com/docs/api/node#create_recipient)\n  * [`list([params])`](https://stripe.com/docs/api/node#list_recipients)\n  * [`update(recipientId[, params])`](https://stripe.com/docs/api/node#update_recipient)\n  * [`retrieve(recipientId)`](https://stripe.com/docs/api/node#retrieve_recipient)\n  * [`del(recipientId)`](https://stripe.com/docs/api/node#delete_recipient)\n  * `setMetadata(recipientId, metadataObject)` ([metadata info](https://stripe.com/docs/api/node#metadata))\n  * `setMetadata(recipientId, key, value)`\n  * `getMetadata(recipientId)`\n * tokens\n  * [`create(params)`](https://stripe.com/docs/api/node#create_card_token)\n  * [`retrieve(tokenId)`](https://stripe.com/docs/api/node#retrieve_token)\n * transfers\n  * [`create(params)`](https://stripe.com/docs/api/node#create_transfer)\n  * [`list([params])`](https://stripe.com/docs/api/node#list_transfers)\n  * [`retrieve(transferId)`](https://stripe.com/docs/api/node#retrieve_transfer)\n  * [`update(transferId[, params])`](https://stripe.com/docs/api/node#update_transfer)\n  * [`cancel(transferId)`](https://stripe.com/docs/api/node#cancel_transfer)\n  * [`listTransactions(transferId[, params])`](https://stripe.com/docs/api/curl#list_transfers)\n  * `setMetadata(transferId, metadataObject)` ([metadata info](https://stripe.com/docs/api/node#metadata))\n  * `setMetadata(transferId, key, value)`\n  * `getMetadata(transferId)`\n\n## Configuration\n\n * `stripe.setApiKey(\' your secret api key \');`\n * `stripe.setTimeout(20000); // in ms` (default is node\'s default: `120000ms`)\n\n## More information / wikis\n\n * **[In-depth Documentation](https://stripe.com/docs/api/node)**\n * [Version 2 Overview](https://github.com/stripe/stripe-node/wiki/Version-2)\n * [REST API Version](https://github.com/stripe/stripe-node/wiki/REST-API-Version)\n * [Error Handling](https://github.com/stripe/stripe-node/wiki/Error-Handling)\n * [Using Stripe Connect](https://github.com/stripe/stripe-node/wiki/Using-Stripe-Connect-with-node.js)\n\n## Development\n\nTo run the tests you\'ll need a Stripe *Test* API key (from your [Stripe Dashboard](https://manage.stripe.com)):\n\n```bash\n$ npm install -g mocha\n$ npm test\n```\n\n*Note: On Windows use `SET` isntead of `export` for setting the `STRIPE_TEST_API_KEY` environment variable.*\n\nIf you don\'t have a prefixed key (in the form `sk_test_...`) you can get one by rolling your "Test Secret Key". This can be done under your dashboard (*Account Setting -> API Keys -> Click the roll icon next to the "test secret key"*). This should give you a new prefixed key (\'sk_test_..\'), which will then be usable by the node mocha tests.\n\n## Author\n\nOriginally by [Ask BjÃ¸rn Hansen](https://github.com/abh) (ask@develooper.com). Development was sponsored by YellowBot. Now officially maintained by Stripe.\n',
29 silly publish   readmeFilename: 'README.md',
29 silly publish   gitHead: 'd93a44b9c7c3494f6be18b074c8c790ba0eb1ca9',
29 silly publish   bugs: { url: 'https://github.com/flovilmart/parse-stripe/issues' },
29 silly publish   _id: 'stripe@2.5.0',
29 silly publish   _shasum: '5fa10cbcbd3ac4572f4cacadddd110374ccb6c7f',
29 silly publish   _from: '.' }
30 verbose request where is /stripe
31 verbose request registry https://registry.npmjs.org/
32 verbose request id 714784968fa5129c
33 verbose url raw /stripe
34 verbose url resolving [ 'https://registry.npmjs.org/', './stripe' ]
35 verbose url resolved https://registry.npmjs.org/stripe
36 verbose request where is https://registry.npmjs.org/stripe
37 info trying registry request attempt 1 at 14:03:25
38 http PUT https://registry.npmjs.org/stripe
39 http 403 https://registry.npmjs.org/stripe
40 verbose headers { date: 'Wed, 18 Jun 2014 18:03:26 GMT',
40 verbose headers   server: 'CouchDB/1.5.0 (Erlang OTP/R14B04)',
40 verbose headers   'content-type': 'application/json',
40 verbose headers   'cache-control': 'max-age=30',
40 verbose headers   'content-length': '12939',
40 verbose headers   'accept-ranges': 'bytes',
40 verbose headers   via: '1.1 varnish',
40 verbose headers   'x-served-by': 'cache-jfk1034-JFK',
40 verbose headers   'x-cache': 'MISS',
40 verbose headers   'x-cache-hits': '0',
40 verbose headers   'x-timer': 'S1403114605.998977,VS0,VE403',
40 verbose headers   'keep-alive': 'timeout=10, max=50',
40 verbose headers   connection: 'Keep-Alive' }
41 error publish Failed PUT 403
42 error Error: forbidden cannot modify pre-existing version: 2.5.0
42 error old={"name":"stripe","version":"2.5.0","description":"Stripe API wrapper","homepage":"https://github.com/stripe/stripe-node","author":{"name":"Stripe","email":"james@stripe.com","url":"https://stripe.com/"},"contributors":[{"name":"Ask BjÃ¸rn Hansen","email":"ask@develooper.com","url":"http://www.askask.com/"},{"name":"Michelle Bu","email":"michelle@stripe.com"},{"name":"Alex Sexton","email":"alex@stripe.com"},{"name":"James Padolsey","email":"james@stripe.com"}],"repository":{"type":"git","url":"git://github.com/stripe/stripe-node.git"},"bugs:":"https://github.com/stripe/stripe-node/issues","engines":{"node":">= v0.8.0"},"main":"lib/stripe.js","devDependencies":{"mocha":"~1.13.0","chai":"~1.8.0","chai-as-promised":"~4.0.0","mocha-as-promised":"~1.4.0"},"dependencies":{"when":"~2.4.0"},"scripts":{"test":"mocha"},"bugs":{"url":"https://github.com/stripe/stripe-node/issues"},"_id":"stripe@2.5.0","dist":{"shasum":"50c442132450bf0d17dd33da92248f9929207734","tarball":"http://registry.npmjs.org/stripe/-/stripe-2.5.0.tgz"},"_from":".","_npmVersion":"1.4.3","_npmUser":{"name":"padolsey","email":"npm@padolsey.net"},"maintainers":[{"name":"ask","email":"ask@develooper.com"},{"name":"slexaxton","email":"alexsexton@gmail.com"},{"name":"padolsey","email":"npm@padolsey.net"},{"name":"michelle","email":"really.ez@gmail.com"}]}
42 error new={"name":"stripe","version":"2.5.0","description":"Stripe API wrapper","homepage":"https://github.com/flovilmart/parse-stripe","author":{"name":"Florent Vilmart","email":"flovilmart@icloud.com","url":"https://stripe.com/"},"contributors":[{"name":"Ask BjÃ¸rn Hansen","email":"ask@develooper.com","url":"http://www.askask.com/"},{"name":"Michelle Bu","email":"michelle@stripe.com"},{"name":"Alex Sexton","email":"alex@stripe.com"},{"name":"James Padolsey","email":"james@stripe.com"}],"repository":{"type":"git","url":"git://github.com/flovilmart/parse-stripe.git"},"bugs:":"https://github.com/flovilmart/parse-stripe/issues","engines":{"node":">= v0.8.0"},"main":"lib/stripe.js","devDependencies":{"mocha":"~1.13.0","chai":"~1.8.0","chai-as-promised":"~4.0.0","mocha-as-promised":"~1.4.0"},"dependencies":{"when":"~2.4.0"},"scripts":{"test":"mocha"},"readme":"# Stripe node.js bindings [![Build Status](https://travis-ci.org/stripe/stripe-node.png?branch=master)](https://travis-ci.org/stripe/stripe-node)\u000a\u000a## Version 2 Update Notice\u000a\u000a**[Read about Version 2 here](https://github.com/stripe/stripe-node/wiki/Version-2)** (Released October 18th, 2013)\u000a\u000a## Installation\u000a\u000a`npm install stripe`\u000a\u000a## Documentation\u000a\u000aDocumentation is available at https://stripe.com/docs/api/node.\u000a\u000a## API Overview\u000a\u000aEvery resource is accessed via your `stripe` instance:\u000a\u000a```js\u000avar stripe = require('stripe')(' your stripe API key ');\u000a// stripe.{ RESOURCE_NAME }.{ METHOD_NAME }\u000a```\u000a\u000aEvery resource method accepts an optional callback as the last argument:\u000a\u000a```js\u000astripe.customers.create(\u000a  { email: 'customer@example.com' },\u000a  function(err, customer) {\u000a    err; // null if no error occurred\u000a    customer; // the created customer object\u000a  }\u000a);\u000a```\u000a\u000aAdditionally, every resource method returns a promise, so you don't have to use the regular callback. E.g.\u000a\u000a```js\u000a// Create a new customer and then a new charge for that customer:\u000astripe.customers.create({\u000a  email: 'foo-customer@example.com'\u000a}).then(function(customer) {\u000a  return stripe.charges.create({\u000a    amount: 1600,\u000a    currency: 'usd',\u000a    customer: customer.id\u000a  });\u000a}).then(function(charge) {\u000a  // New charge created on a new customer\u000a}, function(err) {\u000a  // Deal with an error\u000a});\u000a```\u000a\u000a### Available resources & methods\u000a\u000a*Where you see `params` it is a plain JavaScript object, e.g. `{ email: 'foo@example.com' }`*\u000a\u000a * account\u000a  * [`retrieve()`](https://stripe.com/docs/api/node#retrieve_account)\u000a * balance\u000a  * [`retrieve()`](https://stripe.com/docs/api/node#retrieve_balance)\u000a  * [`listTransactions([params])`](https://stripe.com/docs/api/node#balance_history)\u000a  * [`retrieveTransaction(transactionId)`](https://stripe.com/docs/api/node#retrieve_balance_transaction)\u000a * charges\u000a  * [`create(params)`](https://stripe.com/docs/api/node#create_charge)\u000a  * [`list([params])`](https://stripe.com/docs/api/node#list_charges)\u000a  * [`retrieve(chargeId)`](https://stripe.com/docs/api/node#retrieve_charge)\u000a  * [`capture(chargeId[, params])`](https://stripe.com/docs/api/node#charge_capture)\u000a  * [`refund(chargeId[, params])`](https://stripe.com/docs/api/node#refund_charge)\u000a  * [`update(chargeId[, params])`](https://stripe.com/docs/api/node#update_charge)\u000a  * [`updateDispute(chargeId[, params])`](https://stripe.com/docs/api/node#update_dispute)\u000a  * [`closeDispute(chargeId[, params])`](https://stripe.com/docs/api/node#close_dispute)\u000a  * `setMetadata(chargeId, metadataObject)` ([metadata info](https://stripe.com/docs/api/node#metadata))\u000a  * `setMetadata(chargeId, key, value)`\u000a  * `getMetadata(chargeId)`\u000a * coupons\u000a  * [`create(params)`](https://stripe.com/docs/api/node#create_coupon)\u000a  * [`list([params])`](https://stripe.com/docs/api/node#list_coupons)\u000a  * [`retrieve(chargeId)`](https://stripe.com/docs/api/node#retrieve_coupon)\u000a  * [`del(chargeId)`](https://stripe.com/docs/api/node#delete_coupon)\u000a * customers\u000a  * [`create(params)`](https://stripe.com/docs/api/node#create_customer)\u000a  * [`list([params])`](https://stripe.com/docs/api/node#list_customers)\u000a  * [`update(customerId[, params])`](https://stripe.com/docs/api/node#update_customer)\u000a  * [`retrieve(customerId)`](https://stripe.com/docs/api/node#retrieve_customer)\u000a  * [`del(customerId)`](https://stripe.com/docs/api/node#delete_customer)\u000a  * `setMetadata(customerId, metadataObject)` ([metadata info](https://stripe.com/docs/api/node#metadata))\u000a  * `setMetadata(customerId, key, value)`\u000a  * `getMetadata(customerId)`\u000a  * [`updateSubscription(customerId, subscriptionId, [, params])`](https://stripe.com/docs/api/node#update_subscription)\u000a  * [`cancelSubscription(customerId, subscriptionId, [, params])`](https://stripe.com/docs/api/node#cancel_subscription)\u000a  * [`createCard(customerId[, params])`](https://stripe.com/docs/api/node#create_card)\u000a  * [`listCards(customerId)`](https://stripe.com/docs/api/node#list_cards)\u000a  * [`retrieveCard(customerId, cardId)`](https://stripe.com/docs/api/node#retrieve_card)\u000a  * [`updateCard(customerId, cardId[, params])`](https://stripe.com/docs/api/node#update_card)\u000a  * [`deleteCard(customerId, cardId)`](https://stripe.com/docs/api/node#delete_card)\u000a  * [`deleteDiscount(customerId)`](https://stripe.com/docs/api/node#delete_discount)\u000a * events (*[types of events](https://stripe.com/docs/api/node#event_types)*)\u000a  * [`list([params])`](https://stripe.com/docs/api/node#list_events)\u000a  * [`retrieve(eventId)`](https://stripe.com/docs/api/node#retrieve_event)\u000a * invoiceItems\u000a  * [`create(params)`](https://stripe.com/docs/api/node#create_invoiceitem)\u000a  * [`list([params])`](https://stripe.com/docs/api/node#list_invoiceitems)\u000a  * [`update(invoiceItemId[, params])`](https://stripe.com/docs/api/node#update_invoiceitem)\u000a  * [`retrieve(invoiceItemId)`](https://stripe.com/docs/api/node#retrieve_invoiceitem)\u000a  * [`del(invoiceItemId)`](https://stripe.com/docs/api/node#delete_invoiceitem)\u000a * invoices\u000a  * [`create(params)`](https://stripe.com/docs/api/node#create_invoice)\u000a  * [`list([params])`](https://stripe.com/docs/api/node#list_customer_invoices)\u000a  * [`update(invoiceId[, params])`](https://stripe.com/docs/api/node#update_invoice)\u000a  * [`retrieve(invoiceId)`](https://stripe.com/docs/api/node#retrieve_invoice)\u000a  * [`retrieveLines(invoiceId)`](https://stripe.com/docs/api/node#invoice_lines)\u000a  * [`retrieveUpcoming(customerId)`](https://stripe.com/docs/api/node#retrieve_customer_invoice)\u000a  * [`pay(invoiceId)`](https://stripe.com/docs/api/node#pay_invoice)\u000a * plans\u000a  * [`create(params)`](https://stripe.com/docs/api/node#create_plan)\u000a  * [`list([params])`](https://stripe.com/docs/api/node#list_plans)\u000a  * [`update(planId[, params])`](https://stripe.com/docs/api/node#update_plan)\u000a  * [`retrieve(planId)`](https://stripe.com/docs/api/node#retrieve_plan)\u000a  * [`del(planId)`](https://stripe.com/docs/api/node#delete_plan)\u000a * recipient\u000a  * [`create(params)`](https://stripe.com/docs/api/node#create_recipient)\u000a  * [`list([params])`](https://stripe.com/docs/api/node#list_recipients)\u000a  * [`update(recipientId[, params])`](https://stripe.com/docs/api/node#update_recipient)\u000a  * [`retrieve(recipientId)`](https://stripe.com/docs/api/node#retrieve_recipient)\u000a  * [`del(recipientId)`](https://stripe.com/docs/api/node#delete_recipient)\u000a  * `setMetadata(recipientId, metadataObject)` ([metadata info](https://stripe.com/docs/api/node#metadata))\u000a  * `setMetadata(recipientId, key, value)`\u000a  * `getMetadata(recipientId)`\u000a * tokens\u000a  * [`create(params)`](https://stripe.com/docs/api/node#create_card_token)\u000a  * [`retrieve(tokenId)`](https://stripe.com/docs/api/node#retrieve_token)\u000a * transfers\u000a  * [`create(params)`](https://stripe.com/docs/api/node#create_transfer)\u000a  * [`list([params])`](https://stripe.com/docs/api/node#list_transfers)\u000a  * [`retrieve(transferId)`](https://stripe.com/docs/api/node#retrieve_transfer)\u000a  * [`update(transferId[, params])`](https://stripe.com/docs/api/node#update_transfer)\u000a  * [`cancel(transferId)`](https://stripe.com/docs/api/node#cancel_transfer)\u000a  * [`listTransactions(transferId[, params])`](https://stripe.com/docs/api/curl#list_transfers)\u000a  * `setMetadata(transferId, metadataObject)` ([metadata info](https://stripe.com/docs/api/node#metadata))\u000a  * `setMetadata(transferId, key, value)`\u000a  * `getMetadata(transferId)`\u000a\u000a## Configuration\u000a\u000a * `stripe.setApiKey(' your secret api key ');`\u000a * `stripe.setTimeout(20000); // in ms` (default is node's default: `120000ms`)\u000a\u000a## More information / wikis\u000a\u000a * **[In-depth Documentation](https://stripe.com/docs/api/node)**\u000a * [Version 2 Overview](https://github.com/stripe/stripe-node/wiki/Version-2)\u000a * [REST API Version](https://github.com/stripe/stripe-node/wiki/REST-API-Version)\u000a * [Error Handling](https://github.com/stripe/stripe-node/wiki/Error-Handling)\u000a * [Using Stripe Connect](https://github.com/stripe/stripe-node/wiki/Using-Stripe-Connect-with-node.js)\u000a\u000a## Development\u000a\u000aTo run the tests you'll need a Stripe *Test* API key (from your [Stripe Dashboard](https://manage.stripe.com)):\u000a\u000a```bash\u000a$ npm install -g mocha\u000a$ npm test\u000a```\u000a\u000a*Note: On Windows use `SET` isntead of `export` for setting the `STRIPE_TEST_API_KEY` environment variable.*\u000a\u000aIf you don't have a prefixed key (in the form `sk_test_...`) you can get one by rolling your \"Test Secret Key\". This can be done under your dashboard (*Account Setting -> API Keys -> Click the roll icon next to the \"test secret key\"*). This should give you a new prefixed key ('sk_test_..'), which will then be usable by the node mocha tests.\u000a\u000a## Author\u000a\u000aOriginally by [Ask BjÃ¸rn Hansen](https://github.com/abh) (ask@develooper.com). Development was sponsored by YellowBot. Now officially maintained by Stripe.\u000a","readmeFilename":"README.md","gitHead":"d93a44b9c7c3494f6be18b074c8c790ba0eb1ca9","bugs":{"url":"https://github.com/flovilmart/parse-stripe/issues"},"_id":"stripe@2.5.0","_shasum":"5fa10cbcbd3ac4572f4cacadddd110374ccb6c7f","_from":".","_npmVersion":"1.4.16","_npmUser":{"name":"flovilmart","email":"flovilmart@icloud.com"},"maintainers":[{"name":"flovilmart","email":"flovilmart@icloud.com"}],"dist":{"shasum":"5fa10cbcbd3ac4572f4cacadddd110374ccb6c7f","tarball":"http://registry.npmjs.org/stripe/-/stripe-2.5.0.tgz"}}: stripe
42 error     at RegClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:300:14)
42 error     at Request._callback (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:238:65)
42 error     at Request.self.callback (/usr/local/lib/node_modules/npm/node_modules/request/request.js:123:22)
42 error     at Request.EventEmitter.emit (events.js:98:17)
42 error     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:893:14)
42 error     at Request.EventEmitter.emit (events.js:117:20)
42 error     at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:844:12)
42 error     at IncomingMessage.EventEmitter.emit (events.js:117:20)
42 error     at _stream_readable.js:919:16
42 error     at process._tickCallback (node.js:419:13)
43 error If you need help, you may report this *entire* log,
43 error including the npm and node versions, at:
43 error     <http://github.com/npm/npm/issues>
44 error System Darwin 13.2.0
45 error command "node" "/usr/local/bin/npm" "publish"
46 error cwd /Users/florent/src/parse-stripe
47 error node -v v0.10.28
48 error npm -v 1.4.16
49 verbose exit [ 1, true ]
